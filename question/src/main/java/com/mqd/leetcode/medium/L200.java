package com.mqd.leetcode.medium;

import java.util.LinkedList;
import java.util.Queue;

/**
 * leetcode 200. 岛屿数量
 */
public class L200 {

    public static void main(String[] args) {
        Solution p = new Solution();
        char[][] g = {
                {'1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '0', '1', '1'},
                {'0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '0'},
                {'1', '0', '1', '1', '1', '0', '0', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
                {'1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
                {'1', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
                {'1', '0', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '0', '1', '1', '1', '0', '1', '1', '1'},
                {'0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1', '1', '1'},
                {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '0', '1', '1'},
                {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
                {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
                {'0', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
                {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
                {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
                {'1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1'},
                {'1', '0', '1', '1', '1', '1', '1', '0', '1', '1', '1', '0', '1', '1', '1', '1', '0', '1', '1', '1'},
                {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '0'},
                {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '0', '0'},
                {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
                {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
                {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'}
        };
        System.out.println(p.numIslands(g));
    }

    static class Solution {
        public int numIslands(char[][] grid) {
            int ans = 0;
            for (int i = 0; i < grid.length; i++) {
                for (int j = 0; j < grid[0].length; j++) {
                    if (grid[i][j] == '1') {
                        bfs(grid, i, j);
                        ans++;
                    }
                }
            }
            return ans;
        }

        private void bfs(char[][] grid, int r, int c) {
            Queue<int[]> q = new LinkedList<>();
            q.add(new int[]{r, c});
            while (!q.isEmpty()) {
                int[] p = q.poll();
                grid[p[0]][p[1]] = '2';
                if (p[0] - 1 >= 0 && grid[p[0] - 1][p[1]] == '1') {
                    grid[p[0] - 1][p[1]] = '2';
                    q.add(new int[]{p[0] - 1, p[1]});
                }
                if (p[0] + 1 < grid.length && grid[p[0] + 1][p[1]] == '1') {
                    grid[p[0] + 1][p[1]] = '2';
                    q.add(new int[]{p[0] + 1, p[1]});
                }
                if (p[1] - 1 >= 0 && grid[p[0]][p[1] - 1] == '1') {
                    grid[p[0]][p[1] - 1] = '2';
                    q.add(new int[]{p[0], p[1] - 1});
                }
                if (p[1] + 1 < grid[0].length && grid[p[0]][p[1] + 1] == '1') {
                    grid[p[0]][p[1] + 1] = '2';
                    q.add(new int[]{p[0], p[1] + 1});
                }
            }
        }
    }
}
