package com.mqd.leetcode.medium;

/**
 * leetcode 1658. 将 x 减到 0 的最小操作数
 * 给你一个整数数组 nums 和一个整数 x 。每一次操作时，你应当移除数组 nums 最左边或最右边的元素，
 * 然后从 x 中减去该元素的值。请注意，需要 修改 数组以供接下来的操作使用。
 *
 * 如果可以将 x恰好 减到0 ，返回 最小操作数 ；否则，返回 -1 。
 */
public class L1658 {

    public static void main(String[] args) {
        Solution p = new Solution();
        int[] test1 = {1,1,4,2,3};
        System.out.println("test1: " + (p.minOperations(test1, 5) == 2));
        int[] test2 = {5,6,7,8,9};
        System.out.println("test2: " + (p.minOperations(test2, 4) == -1));
        int[] test3 = {3,2,20,1,1,3};
        System.out.println("test3: " + (p.minOperations(test3, 10) == 5));
        int[] test4 = {1,1};
        System.out.println("test4: " + (p.minOperations(test4, 3) == -1));
        int[] test5 = {8828,9581,49,9818,9974,9869,9991,10000,10000,10000,9999,9993,9904,8819,1231,6309};
        System.out.println("test5: " + (p.minOperations(test5, 134365) == 16));
        int[] test6 = {5,2,3,1,1};
        System.out.println("test6: " + (p.minOperations(test6, 5) == 1));
        int[] test7 = {5,1,4,2,3};
        System.out.println("test7: " + (p.minOperations(test7, 6) == 2));
        int[] test8 = {716,9207,8240,4703,7194,3762,4401,291,4902,5062,7580,1470,281,4856,3767,4682,7512,6109,6650,
                5946,3018,8286,8351,2498,8128,6579,6003,1637,2676,7225,1072,1265,3776,1147,4308,2147,8967,2405,1635,
                7641,9504,6550,7046,8047,8715,3866,7984,2160,3264,4954,7840,7939,5158,1954,6000,7279,7645,484,9973,
                9869,9911,9988,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,
                10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,
                10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,
                10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,
                10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,
                10000,10000,10000,9978,7338,4628,4687,3989,3590,6866,1498,4659,8360,2249,5315,3446,9412,1011,1330,5364,
                6844,8616,9241,4363,5442,1700,1787,1879,7563,4795,4670,6095,7327,7002,7374,9571,3416,7286,4980,6780,
                5440,6263,9365,3747,6872,9332,6494,1367,4727,4840,3430,5616,6319,8785,8762,5321,8943,5526,4732,5352,
                3780,1209,4019,7544,505,2973,1882,8431,9444,181,3390,7374,8185,1943,7939};
        System.out.println("test8: " + (p.minOperations(test8, 1572708) == 219));
        int[] test9 = {7756,5941,4175,7549,5096,638,9312,9827,3902,1819,6192,5034,727,7540,7728,7572,9136,4421,3100,
                3527,6627,1045,5668,9043,5745,2194,6272,9978,1687,9227,1722,5083,1327,1398,1798,1415,8512,3603,4923,
                8073,2177,9145,3310,6595,9331,2327,8656,5268,4438,840,695,6835,8021,2337,1468,9143,6112,1105,9124,1480,
                8031,5331,1211,2843,8789,5974,6058,478,3587,169,2353,9399,8034,6721,9434,1658,7258,6640,2140,6849,2189,
                8263,7754,2492,4316,3696,1540,7024,5,1443,4547,7169,1344,663,2743,7117,3866,4537,763,4287,9905,9127,
                5792,6622,5619,4113,3813,8052,8974,449,39,8143,6246,6918,6319,7757,7228,8980,6690,4520,2178,4261,8497,
                6691,5697,7985,2708,6097,9312,9674,7064,937,4276,3954,7672,3207,9107,4828,3819,9200,2564,7466,9421,4664,
                7641,8509,3794,7110,7138,1924,9512,6951,8278,8209,1189,5278,8924,2116,3871,5897,6333,8686,6065,6447,
                8117,2658,7418,3733,6499,114,984,9632,8671,5430,4373,2496,7300,2052,9167,3730,1957,8618,3865,6168,2155,
                8283,8503,5657,4111,6954,5708,5450,1610,7579,3192,4815,7500,8584,1488,9680,6457,7383,3230,1404,7601,
                3577,5491,5591,8237,6726,7613,6558,8924,4800,8264,2112,5499,1744,8824,5123,2484,8750,5446,8207,5874,
                9999,4208,9695,9015,6478,3276,5632,9081,6526,997,4144,4485,5389,9564,3164,4626,6601,2239,4551,8906,5892,
                4955,8163,7014,1238,9050,2719,3727,2171,5227,8724,8021,224,6805,7724,937,2520,5445,3536,6795,7858,426,
                1316,4472,2870,9357,7396,4925,2752,3115,6990,5401,3143,6931,8263,5596,9538,7915,3269,9631,2030,4572,
                7140,5224,6209,581,1632,4593,8667,9956,9737,7024,1118,9398,8447,1363,8850,5590,1420,8559,8978,23,5959,
                4587,8032,6101,256,8321,699,9991,3492,4193,8962,3025,9681,8811,7009,790,703,9686,5647,1970,7019,5458,
                7567,9492,9273,5240,7408,8282,2098,7284,7564,4281,5679,9567,2170,6559,3096,478,5901,201,8991,4980,708,
                8938,97,2339,1231,1207,9893,5698,7682,9359,7760,6181,4701,3352,2078,7366,8584,4759,7642,5423,5560,4159,
                6049,9600,8979,1713,3998,371,6799,2650,9864,6151,5913,5585,648,3652,7206,9221,9409,5346,3626,1622,3276,
                2841,3809,1892,5384,8126,3977,295,6767,3633,2065,372,3704,4974,915,3537,3552,8487,1693,5377,4671,4655,
                8231,8225,3800,3800,9933,5696,242,5586,7402,2697,9334,6541,2426,5328,2296,7733,6544,128,604,9777,4910,
                4929,6437,6388,7577,2674,9658,8777,8047,1082,5351,7242,5232,4803,5193,5228,5738,6759,8866,2648,1723,
                5434,2675,4965,6788,2525,8523,761,7974,8064,169,928,7116,2542,532,287,1567,2215,1668,2135,7220,6051,
                9919,3640,8101,9357,2199,1506,6119,6623,8039,9596,8650,8836,7671,7283,2268,383,9682,9482,4102,139,3938,
                7762,1913,8104,1232,9584,2612,7824,2206,63,6855,9424,1982,6658,6688,8319,4960,166,2089,3447,6228,7001,
                5404,5251,5191,8687,2654,8580,336,7713,4773,1590,907,1855,70,2515,8349,9492,3554,1434,9184,8682,1455,
                7601,6167,5626,3122,2235,4975,5569,9368,5597,2233,8584,8471,6543,7627,9494,7994,7098,6481,8080,3840,162,
                8885,7670,4090,4220,6651,5401,2861,5412,2005,6301,7106,331,5597,6168,2820,4564,4517,5268,4306,5273,4534,
                935,5874,694,156,6784,3062,2008,5190,1928,2990,1703,8826,8970,6940,6126,9613,5679,5723,8204,8873,5245,
                4740,4934,8554,4822,562,5064,3977,5383,4283,7037,2656,1541,7771,1095,3481,5127,7749,5724,1756,8393,8025,
                2694,528,300,1096,5288,467,7829,7967,1585,8006,1801,1316,585,6411,3886,9273,5485,8931,5238,7455,9027,
                383,2179,5,6490,3077,1020,8240,1473,7241,3887,3311,2552,544,6721,9613,2796,6428,3958,3131,4404,5894,
                9253,3296,8933,6541,9875,7223,7195,2295,5322,2596,9859,5586,5534,138,6642,1616,7362,4647,9926,3220,1633,
                2743,4096,8185,2208,1930,1851,6444,1870,1476,3522,8104,2218,6743,5331,9266,7979,2031,301,8807,4964,4058,
                5520,256,8473,6940,8316,9168,8077,9803,3208,3944,9140,4443,5250,4381,2489,2346,3078,4507,4958,2353,4250,
                3835,4643,6784,3160,5186,9984,4477,932,8657,8370,4790,7505,5776,1084,792,2341,1960,9497,7743,521,8848,
                7632,8802,7772,9704,4958,6097,4820,7078,5385,6353,4787,4245,5351,872,281,2849,580,2849,1446,6677,2951,
                7163,3501,3891,6144,40,6638,5182,5079,1813,1820,9151,11,6252,4348,3099,7529,5326,2711,8566,1125,1346,
                7877,7793,1351,2652,9393,1632,8337,9850,4048,8429,5196,4954,7568,2977,5706,96,8592,9770,7231,576,5881,
                3931,1321,8052,4057,670,7485,15,1132,8737,7343,6367,2158,7154,2454,355,9845,1770,3522,6667,7016,4757,
                3248,2017,9569,9443,6459,5290,3957,5320,5856,5855,2868,1675,964,6069,2887,7100,5808,8333,5556,3910,2603,
                8940,9622,911,5767,7430,187,3881,2261,9715,1067,2372,99,505,8952,2666,6146,1154,6059,828,7913,5799,853,
                7278,3692,8929,7997,4935,1005,6932,9226,5591,9447,6930,5996,308,3806,2699,410,7886,2418,2064,4427,8222,
                3981,3753,4841,3891,4211,682,5656,3580,3222,5801,847,2431,6892,6968,5057,944,5505,9770,926,5550,9243,
                6681,5687,5401,8164,1892,6638,25,7922,174,4980,400,8196,5722,2650,736,4187,2833,89,2453,3276,8345,6312,
                9571,2244,6601,173,1882,4358,3473,8323,3739,7734,3351,9638,9767,4422,5866,2625,5946,3089,654,6205,4157,
                5172,5748,2553,7720,3854,450,5457,9301,7756,5289,6788,7502,403,7010,8452};
        System.out.println("test9: " + (p.minOperations(test9, 3847325) == 750));
        int[] test10 = {500,1,4,2,3};
        System.out.println("test10: " + (p.minOperations(test10, 500) == 1));
        int[] test11 = {5281,4109,5962,1122,8456,7256,9646,1708,7754,3164,8637,3769,5311,3714,2661,3807,5270,2026,164,
                2510,9151,9796,2563,5234,297,2883,5931,8937,9729,5201,9954,6776,5631,2966,1316,3999,2302,8014,7120,4012,
                9610,6541,7009,3438,9722,4564,9361,5800,5404,9304,1483,882,9834,2592,8812,371,7574,8236,2698,7254,4212,
                9254,5228,9219,5310,6896,1693,9635,1544,5751,7346,4104,4867,977,4988,5981,1644,7039,5808,8544,8961,2364,
                6156,6468,6357,4003,5106,261,3490,7859,2876,9116,3955,1218,2598,5866,1613,3737,8047,8483,2450,9009,9806,
                8432,8006,616,4519,2180,9641,9988,9151,1902,7002,8397,7355,9236,2302,5218,7151,3728,3118,8120,1728,2963,
                3588,4535,1953,2923,9496,7013,1692,6697,4962,862,3406,3484,9902,3031,6706,4025,6850,5257,7176,6724,1669,
                6801,9857,8702,1430,8299,3070,5729,3496,9443,6430,5988,7419,4436,9946,7153,6561,9938,6154,8614,1181,
                9708,2362,7881,9043,1703,5874,1257,5929,5729,606,8534,7245,8213,8227,2170,6374,2483,2111,4013,440,6240,
                6458,3812,15,7167,7967,1863,3034,742,7945,1412,8673,6499,8897,4716,816,4596,5337,8502,8974,690,9339,
                2095,4330,7884,8226,6108,8752,8657,1547,7796,4552,1913,3445,9278,5373,7569,1569,4422,2732,2833,5756,
                7402,1034,8197,8275,5748,8535,6599,2872,9128,3,9739,8336,2451,189,3264,878,504,2119,4518,2771,4082,6175,
                4135,5465,8331,7940,2665,6176,7136,5674,4746,6348};
        System.out.println("test11: " + (p.minOperations(test11, 151230) == 28));
    }

    static class Solution {
        public int minOperations(int[] nums, int x) {
            // 求和
            int sum = 0;
            for (int num : nums) sum += num;
            // 寻找目标值的最大子串
            // 最大字串的长度
            int maxL = -1, target = sum - x;
            int l = 0, r = 0;
            // 当前[l, r)范围内的值
            int cur = 0;
            while (r < nums.length) {
                cur += nums[r++];
                while (cur > target && l < r) cur -= nums[l++];
                if (cur == target) maxL = Math.max(maxL, r - l);
            }
            return maxL == -1 ? -1 : nums.length - maxL;
        }

        private int dfs(int[] nums, int x, int l, int r) {
            if (x == 0) {
                return 0;
            }
            if (x < 0 || l > r) {
                return -1;
            }
            int lVal = dfs(nums, x - nums[l], l + 1, r);
            int rVal = dfs(nums, x - nums[r], l, r - 1);
            if (lVal < 0 && rVal < 0) return -1;
            if (lVal >= 0 && rVal >= 0) return Math.min(lVal, rVal) + 1;
            if (lVal >= 0) return lVal + 1;
            return rVal + 1;
        }
    }
}
